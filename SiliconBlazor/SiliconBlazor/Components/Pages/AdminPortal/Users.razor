@page "/adminportal/users"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using SiliconBlazor.Components.Account.Shared

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Users> Logger

@attribute [StreamRendering]


<div class="col-mb3">
    <AdminPortal />
</div>

<div class="container">

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="alert alert-danger error-message">
            @StatusMessage
        </div>
    }

    <div class="users">
        <h1>Users</h1>
        <div class="user-list">
            @if (users != null && users.Any())
            {
                @foreach (var user in users)
                {
                    <EditForm FormName="@(user.Id.ToString())" Model="Input" OnValidSubmit="@(() => UpdateUserAsync(user))">
                        <div class="user-item">
                            <label>@user.FirstName:</label>
                            <InputText @bind-Value="user.FirstName" />
                            <label>@user.LastName:</label>
                            <InputText @bind-Value="user.LastName" />
                            <label>Email:</label>
                            <InputText @bind-Value="user.Email" />
                            <label>Phone:</label>
                            <InputText @bind-Value="Input.PhoneNumber" />
                            <label>Bio:</label>
                            <InputTextArea @bind-Value="Input.Bio" />
                            <div class="actions">
                                <button class="btn btn-update" type="submit">Update</button>
                                @* <button class="btn btn-delete" type="button" @onclick="() => DeleteUserAsync(user)">Delete</button> *@
                            </div>
                        </div>
                    </EditForm>
                }
            }
            else
            {
                <p>Loading...</p>
            }
        </div>
    </div>
</div>

@code {
    private ApplicationUser[]? users;

    [SupplyParameterFromQuery]
    public string StatusMessage { get; set; } = "";


    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();



    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await Http.GetFromJsonAsync<ApplicationUser[]>("https://silicon-userprovider.azurewebsites.net/api/GetUsers?code=K9jM3zuKdJQ53URuT1-cNY9X6r7nYHUXRI1s3Oui3ffPAzFu8Gq6Ow%3D%3D");

        }
        catch (Exception ex)
        {
            StatusMessage = $"Error loading users: {ex.Message}";
        }
    }

    private async Task UpdateUserAsync(ApplicationUser user)
    {
        try
        {
            var updatedUser = new ApplicationUser()
            {
                FirstName = user.FirstName,
                LastName = user.LastName,
                Email = user.Email,
                PhoneNumber = Input.PhoneNumber,
                Bio = Input.Bio
            };

            var response = await Http.PutAsJsonAsync($"https://silicon-userprovider.azurewebsites.net/api/user/{user.Email}?code=5oLVs0AkSySFhlnf6Cxu8A9JTVux9frrb7qr4JXoEtx5AzFuq83XNw%3D%3D", updatedUser);
            if (response.IsSuccessStatusCode)
            {
                StatusMessage = $"User {user.UserName} updated successfully!";
            }
            else
            {
                StatusMessage = $"Error updating user {user.UserName}: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error updating user {user.UserName}: {ex.Message}";
        }
    }

    private async Task DeleteUserAsync(ApplicationUser user)
    {

        try
        {
            var response = await Http.DeleteAsync($"https://silicon-userprovider.azurewebsites.net/api/user/user.Email?code=VBZsZazEJM9Bl6Z1jcKvZIwXOv1xEWQ1o9Aix8EZd5egAzFuzdqFtQ%3D%3D");
            if (response.IsSuccessStatusCode)
            {
                StatusMessage = $"User {user.UserName} deleted successfully!";
            }
            else
            {
                StatusMessage = $"Error deleting user {user.UserName}: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error deleting user {user.UserName}: {ex.Message}";
        }
    }

    public class InputModel
    {
        [Display(Name = "First name", Prompt = "Enter your first name", Order = 0)]
        [MinLength(2, ErrorMessage = "Enter your first name")]
        public string FirstName { get; set; } = null!;

        [Display(Name = "Last name", Prompt = "Enter your last name", Order = 1)]
        [MinLength(2, ErrorMessage = "Enter your last name")]
        public string LastName { get; set; } = null!;

        [RegularExpression("^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$", ErrorMessage = "Invalid e-mail address")]
        public string Email { get; set; } = null!;

        [Display(Name = "Phonenumber")]
        public string? PhoneNumber { get; set; }

        [Display(Name = "Bio")]
        public string? Bio { get; set; }
    }
}
