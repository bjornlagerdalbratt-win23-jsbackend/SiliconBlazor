@page "/adminportal/users"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using SiliconBlazor.Components.Account.Shared

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Users> Logger

@attribute [StreamRendering]


<div class="col-mb3">
    <AdminPortal />
</div>

<div class="container">



    <div class="alert alert-danger error-message">
        @StatusMessage
    </div>


    <div class="users">
        <h1>Users</h1>


        @if (users != null)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>First name</th>
                        <th>Last name</th>
                        <th>Email</th>
                        <th>Option</th>
                    </tr>
                </thead>


                <tbody>

                    @foreach (var user in users)
                    {
                        <tr>
                            <th>@user.FirstName</th>
                            <th>@user.LastName</th>
                            <th>@user.Email</th>
                            <th>
                                <a href="/edituser?id=@user.Id" >Edit</a>

                            </th>
                        </tr>
                    }

                </tbody>



            </table>
        }
        else
        {
            <p>Loading...</p>
        }

       
    </div>
</div>

@code {
    private ApplicationUser[]? users;

    [SupplyParameterFromQuery]
    public string StatusMessage { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await Http.GetFromJsonAsync<ApplicationUser[]>("https://silicon-userprovider.azurewebsites.net/api/GetUsers?code=K9jM3zuKdJQ53URuT1-cNY9X6r7nYHUXRI1s3Oui3ffPAzFu8Gq6Ow%3D%3D");

        }
        catch (Exception ex)
        {
            StatusMessage = $"Error loading users: {ex.Message}";
        }
    }

    private async Task DeleteUserAsync(ApplicationUser user)
    {

        try
        {
            var response = await Http.DeleteAsync($"https://silicon-userprovider.azurewebsites.net/api/DeleteUser?code=VBZsZazEJM9Bl6Z1jcKvZIwXOv1xEWQ1o9Aix8EZd5egAzFuzdqFtQ%3D%3D");
            if (response.IsSuccessStatusCode)
            {
                StatusMessage = $"User {user.UserName} deleted successfully!";
                StateHasChanged();
            }
            else
            {
                StatusMessage = $"Error deleting user {user.UserName}: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error deleting user {user.UserName}: {ex.Message}";
        }

    }
}
