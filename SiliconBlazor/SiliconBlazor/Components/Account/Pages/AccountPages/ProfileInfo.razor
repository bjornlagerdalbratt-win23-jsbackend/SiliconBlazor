
@using System.Net.Http.Headers
@using Microsoft.EntityFrameworkCore
@using SiliconBlazor.Services

@rendermode InteractiveServer

@inject HttpClient httpClient
@inject UserService UserService


@if (user == null)
{
    <p>Loading...</p>
}
else
{
    <div class="content-left">
        <div class="avatar">
            <img src="@ProfileImage" alt="avatar image">

            <EditForm FormName="fileForm" Model="FileModel" OnValidSubmit="HandleSubmit" enctype="multipart/form-data">
                <InputFile id="fileUpload" OnChange="HandleSelectedFile" accept="image/*" class="form-control mb-3" hidden />
                <label for="fileUpload"><i class="fa-solid fa-rotate-reverse"></i></label>
            </EditForm>

        </div>
        <div class="account-info">
            <h5>@user.FirstName @user.LastName</h5>
            <p>@user.Email</p>
        </div>
        <a class="btn-transparent"><i class="fa-regular fa-gear"></i>Account Details</a>
        <a class="btn-transparent"><i class="fa-regular fa-lock"></i>Account Notification</a>
        <a class="btn-transparent"><i class="fa-regular fa-arrow-right-from-bracket"></i>Sign Out</a>
    </div>
}


@code {

    private ApplicationUser user = default!;
    private MultipartFormDataContent FileModel = new MultipartFormDataContent();
    private IBrowserFile? selectedFile;
    private string ProfileImage { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetUserAsync();

        // ProfileImage = user.ProfileImage;

    }

    private void HandleSelectedFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }


    private async Task HandleSubmit()
    {
        if (selectedFile != null)
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "file", selectedFile.Name);

            try
            {
                var response = await httpClient.PostAsync("https://fileprovider-siliconapp.azurewebsites.net/api/Upload?code=EVZb6DsuFq4E9-ccuDMCHZi0-SNofCeud3WTffIhadVbAzFuPiZJEQ%3D%3D&containerName=profiles", content);
                if (response.IsSuccessStatusCode)
                {

                    var filePath = await response.Content.ReadAsStringAsync();
                    await UpdateUserProfileImageAsync(filePath);
                    ProfileImage = filePath;
                    StateHasChanged();
                    Console.WriteLine("Worked");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error");
            }
        }
    }

    private async Task UpdateUserProfileImageAsync(string filePath)
    {
        user.ProfileImage = filePath;
        var result = await UserService.UpdateUserAsync(user);

        if (result.Succeeded)
        {
            //success!
        }
        else
        {
            //sad error msg
        }
    }
}
