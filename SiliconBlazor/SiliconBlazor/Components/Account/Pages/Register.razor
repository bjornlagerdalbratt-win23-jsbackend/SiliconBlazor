@page "/Account/Register"

@rendermode InteractiveServer



<PageTitle>Sign up</PageTitle>


<section id="signup">
    <div class="container">

        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <div class="error-message">
                @StatusMessage
            </div>
        }

        <EditForm method="post" FormName="signupform" Model="SignUpForm" OnValidSubmit="OnValidSubmit" asp-route-returnUrl="@ReturnUrl" novalidate>
            <DataAnnotationsValidator />

            <h1>Create Account</h1>
            <p>Already have an account? <a href="/account/login">Sign in here.</a></p>

            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label>First name</label>
                    <InputText @bind-Value="SignUpForm.FirstName" />
                    <span><ValidationMessage For="() => SignUpForm.FirstName" /></span>
                </div>
                <div id="form-lastname" class="input-group">
                    <label>Last name</label>
                    <InputText @bind-Value="SignUpForm.LastName" />
                    <span><ValidationMessage For="() => SignUpForm.LastName" /></span>
                </div>
                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <InputText @bind-Value="SignUpForm.Email" type="email" />
                    <span><ValidationMessage For="() => SignUpForm.Email" /></span>
                </div>
                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <InputText @bind-Value="SignUpForm.Password" type="password" />
                    <span><ValidationMessage For="() => SignUpForm.Password" /></span>
                </div>
                <div id="form-confirm" class="input-group">
                    <label>Confirm password</label>
                    <InputText @bind-Value="SignUpForm.ConfirmPassword" type="password" />
                    <span><ValidationMessage For="() => SignUpForm.ConfirmPassword" /></span>
                </div>
                <div id="form-terms" class="checkbox-group">
                    <InputCheckbox @bind-Value="SignUpForm.TermsAndCondition" />
                    <label>I agree to the <a href="/terms">Terms</a> & <a href="/conditions">Conditions</a></label>
                    <span><ValidationMessage For="() => SignUpForm.TermsAndCondition" /></span>
                </div>
            </div>

            <button id="form-submit" class="btn-theme-s" type="submit">Sign up</button>
        </EditForm>
    </div>
</section>

@code {
    [SupplyParameterFromQuery]
    private string StatusMessage { get; set; } = "";

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private SignUpFormModel SignUpForm { get; set; } = new();

    [Inject]
    public ServiceBusClient ServiceBusClient { get; set; } = null!;

    public async Task OnValidSubmit(EditContext editContext)
    {
        var user = new ApplicationUser
            {
                UserProfile = new UserProfile
                {
                    FirstName = SignUpForm.FirstName,
                    LastName = SignUpForm.LastName,

                },
                UserName = SignUpForm.Email,
                Email = SignUpForm.Email
            };

        try
        {
            var alreadyExists = await UserManager.FindByEmailAsync(SignUpForm.Email);
            if (alreadyExists != null)
            {
                StatusMessage = "An account with this e-mail address already exists.";
                return;
            }


            var result = await UserManager.CreateAsync(user, SignUpForm.Password);
            if (!result.Succeeded)
            {
                StatusMessage = "Unable to register account. Please try again.";
                return;
            };
        }
        catch (Exception ex)
        {
            StatusMessage = "An error occured while creating the account";
            return;
        }


        var queueClient = ServiceBusClient.CreateSender("verification_request");
        var message = new ServiceBusMessage(JsonSerializer.Serialize(new { Email = SignUpForm.Email }));

        try
        {
            await queueClient.SendMessageAsync(message);
        }
        catch (Exception ex)
        {
            StatusMessage = "An error occurred while sending the verification request.";
            return;
        }
        
        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = user.Email, ["returnUrl"] = ReturnUrl });
        }
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);

    }


    public class SignUpFormModel
    {
        [DataType(DataType.Text)]
        [Display(Name = "First name", Prompt = "Enter your first name", Order = 0)]
        [Required(ErrorMessage = "Enter your first name")]
        [MinLength(2, ErrorMessage = "Enter your first name")]
        public string FirstName { get; set; } = null!;


        [DataType(DataType.Text)]
        [Display(Name = "Last name", Prompt = "Enter your last name", Order = 1)]
        [Required(ErrorMessage = "Enter your last name")]
        [MinLength(2, ErrorMessage = "Enter your last name")]
        public string LastName { get; set; } = null!;


        [Display(Name = "Email address", Prompt = "Enter your email address", Order = 2)]
        [DataType(DataType.EmailAddress)]
        [Required(ErrorMessage = "Enter a valid email address")]
        [RegularExpression("^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$", ErrorMessage = "Email a valid email address")]
        public string Email { get; set; } = null!;


        [Display(Name = "Password", Prompt = "Enter your password", Order = 3)]
        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Enter a valid password")]
        [RegularExpression("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$", ErrorMessage = "Enter a valid password")]
        public string Password { get; set; } = null!;


        [Display(Name = "Confirm password", Prompt = "Confirm your passwrod", Order = 4)]
        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Password must be confirmed")]
        [Compare(nameof(Password), ErrorMessage = "Password must be confirmed")]
        public string ConfirmPassword { get; set; } = null!;


        [Display(Name = "I agree to Terms & Conditions ", Order = 5)]
        public bool TermsAndCondition { get; set; } = false;
    }


}

